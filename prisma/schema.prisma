datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// Next Auth
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

// Next Auth
model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

// Next Auth
model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  blogs    Blogs[]
  blogLike BlogLikes[]

  role Role @default(USER)

  @@map(name: "users")
}

// Next Auth
model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Cams {
  id          Int      @id @default(autoincrement())
  title       String 
  webcamUrl   String   @map(name: "webcam_url")
  oldImageUrl String?  @map(name: "old_image_url")
  imageName   String?  @map(name: "image_name")
  imageUrl    String?  @map(name: "image_url")
  description String?
  country     String
  state       String?
  area        String?
  subarea     String?
  lat         Decimal?  @db.Decimal(precision: 8, scale: 6)
  lng         Decimal?  @db.Decimal(precision: 9, scale: 6)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  slug      String?

  @@map(name: "cams")
}

model Message {
  id         Int    @id @default(autoincrement())
  name    String
  email   String
  message String
  
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "message")
}


model Flag {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  type    String
  message String

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "flag")
}

enum Role {
  USER
  ADMIN
}

// TODO: remove blog tables

model Blogs {
  id    Int    @id @default(autoincrement())
  title String @unique
  body  String

  blogLike BlogLikes[]

  author   User @relation(fields: [authorId], references: [id])
  authorId Int  @map(name: "author_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "blogs")
}

model BlogLikes {
  id   Int     @id @default(autoincrement())
  like Boolean

  user   User  @relation(fields: [userId], references: [id])
  userId Int   @map(name: "user_id")
  blog   Blogs @relation(fields: [blogId], references: [id])
  blogId Int   @map(name: "blog_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "blog_likes")
}

